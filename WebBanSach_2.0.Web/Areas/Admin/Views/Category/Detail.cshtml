@model CategoryVM

@{
    ViewBag.Title = "Detail";
    var categories = (IEnumerable<CategoryVM>)ViewBag.Categories;
    var cate = new SelectList(categories.Where(m => m.CategoryId != Model.CategoryId), "CategoryId", "CategoryName");

}

<!-- Breadcrumbs-->
<ol class="breadcrumb">
    <li class="breadcrumb-item">
        <a href="@Url.Action("Index","Dashboard")">Trang chủ</a>
    </li>
    <li class="breadcrumb-item">Quản lý</li>
    <li class="breadcrumb-item">Thể loại</li>
    @if (Model.CategoryId == 0)
    {
        <li class="breadcrumb-item active">Tạo mới</li>
    }
    else
    {
        <li class="breadcrumb-item active">Edit</li>
    }
</ol>

<div class="card mb-3">
    <div class="card-header">
        <i class="far fa-edit"></i>
        @(Model.CategoryId == 0 ? ("Tạo mới") : ("Chỉnh sửa"))
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.CategoryId)
            @Html.HiddenFor(model => model.UniqueStringKey)
            @Html.HiddenFor(model => model.UpdateBy)
            @Html.HiddenFor(model => model.UpdatedDate)
            @Html.HiddenFor(model => model.CreateBy)
            @Html.HiddenFor(model => model.CreateDate)

            <div class="form-group">
                @Html.Label("Thể loại", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CategoryName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Thể loại con của", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ParentId, cate, "Thể loại", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.Label("Trạng thái", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Status)
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Mô tả", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-success" />
                </div>
            </div>
        </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/ckeditor")
    <script>
        (function () {
            CKEDITOR.editorConfig = function (config) {
                config.removePlugins = 'easyimage, cloudservices';
            };

            CKEDITOR.replace("Description");
        })();
    </script>
}
